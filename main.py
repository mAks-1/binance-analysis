import os

from core.data_loader import DataLoader
from strategies.ma_crossover import MACrossover
from strategies.rsi_bb import RSIWithBB
from strategies.sma_cross import SMACrossover
from core.backtester import Backtester

import asyncio

PAIRS_TO_GET = 100


async def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    loader = DataLoader()
    backtester = Backtester([])

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    print("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    all_data = await loader.load_month(2025, 2, PAIRS_TO_GET)

    if all_data.empty:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    strategies = []
    for pair, data in all_data.groupby("pair"):
        strategies.extend(
            [
                SMACrossover(data, pair=pair),
                RSIWithBB(data, pair=pair),
                MACrossover(data, pair=pair),
            ]
        )

    # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –±–µ–∫—Ç–µ—Å—Ç
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç—ñ–≤...")
    backtester.strategies = strategies
    results = await backtester.run_all()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    os.makedirs("results", exist_ok=True)
    results.to_csv("results/metrics.csv", index=False)
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É results/metrics.csv")


if __name__ == "__main__":
    asyncio.run(main())
